// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartBit.Data;

#nullable disable

namespace SmartBit.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SmartBit.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "08c77f09-af58-4fc7-87d6-d2648c7187cc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "12345678-90ab-cdef-1234-567890abcdef",
                            Email = "admin",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEKv6cFHooCRU1s7UzzxW0bkACKmQAyJ3A25yILKJkY4rv2hpyiO+uSfx+p4ZMjkW4A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("SmartBit.Models.Deposit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MonetaryFundId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("MonetaryFundId");

                    b.ToTable("Deposit");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a1111111-1111-1111-1111-111111111111"),
                            Amount = 1500.5,
                            ApplicationUserId = "08c77f09-af58-4fc7-87d6-d2648c7187cc",
                            Date = new DateTime(2024, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MonetaryFundId = new Guid("0e09e00a-ca41-4d01-89ba-f084231c2fe7")
                        },
                        new
                        {
                            Id = new Guid("a2222222-2222-2222-2222-222222222222"),
                            Amount = 750.25,
                            ApplicationUserId = "08c77f09-af58-4fc7-87d6-d2648c7187cc",
                            Date = new DateTime(2024, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MonetaryFundId = new Guid("0e09e00a-ca41-4d01-89ba-f084231c2fe7")
                        },
                        new
                        {
                            Id = new Guid("b3333333-3333-3333-3333-333333333333"),
                            Amount = 2000.0,
                            ApplicationUserId = "08c77f09-af58-4fc7-87d6-d2648c7187cc",
                            Date = new DateTime(2024, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MonetaryFundId = new Guid("bd6e1302-4fa1-41ea-a91c-260ea6c2278d")
                        },
                        new
                        {
                            Id = new Guid("b4444444-4444-4444-4444-444444444444"),
                            Amount = 1200.75,
                            ApplicationUserId = "08c77f09-af58-4fc7-87d6-d2648c7187cc",
                            Date = new DateTime(2024, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MonetaryFundId = new Guid("bd6e1302-4fa1-41ea-a91c-260ea6c2278d")
                        },
                        new
                        {
                            Id = new Guid("c5555555-5555-5555-5555-555555555555"),
                            Amount = 500.0,
                            ApplicationUserId = "08c77f09-af58-4fc7-87d6-d2648c7187cc",
                            Date = new DateTime(2024, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MonetaryFundId = new Guid("6ca2098b-1126-4515-8ca2-fb503321620d")
                        },
                        new
                        {
                            Id = new Guid("c6666666-6666-6666-6666-666666666666"),
                            Amount = 850.29999999999995,
                            ApplicationUserId = "08c77f09-af58-4fc7-87d6-d2648c7187cc",
                            Date = new DateTime(2024, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MonetaryFundId = new Guid("6ca2098b-1126-4515-8ca2-fb503321620d")
                        });
                });

            modelBuilder.Entity("SmartBit.Models.Expense", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BusinessName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("DocumentType")
                        .HasColumnType("int");

                    b.Property<Guid>("MonetaryFundId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Observations")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("MonetaryFundId");

                    b.ToTable("Expenses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            ApplicationUserId = "08c77f09-af58-4fc7-87d6-d2648c7187cc",
                            BusinessName = "Papelería San José",
                            Date = new DateTime(2025, 5, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DocumentType = 1,
                            MonetaryFundId = new Guid("bd6e1302-4fa1-41ea-a91c-260ea6c2278d"),
                            Observations = "Office supplies and stationery"
                        },
                        new
                        {
                            Id = new Guid("77777777-7777-7777-7777-777777777777"),
                            ApplicationUserId = "08c77f09-af58-4fc7-87d6-d2648c7187cc",
                            BusinessName = "Restaurante El Buen Sabor",
                            Date = new DateTime(2025, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DocumentType = 2,
                            MonetaryFundId = new Guid("6ca2098b-1126-4515-8ca2-fb503321620d"),
                            Observations = "Business lunch with client"
                        });
                });

            modelBuilder.Entity("SmartBit.Models.ExpenseDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<Guid>("ExpenseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ExpenseTypeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ExpenseId");

                    b.HasIndex("ExpenseTypeId");

                    b.ToTable("ExpenseDetails");

                    b.HasData(
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            Amount = 75.0,
                            ExpenseId = new Guid("11111111-1111-1111-1111-111111111111"),
                            ExpenseTypeId = "0001"
                        },
                        new
                        {
                            Id = new Guid("55555555-5555-5555-5555-555555555555"),
                            Amount = 125.5,
                            ExpenseId = new Guid("11111111-1111-1111-1111-111111111111"),
                            ExpenseTypeId = "0002"
                        },
                        new
                        {
                            Id = new Guid("88888888-8888-8888-8888-888888888888"),
                            Amount = 85.75,
                            ExpenseId = new Guid("77777777-7777-7777-7777-777777777777"),
                            ExpenseTypeId = "0002"
                        },
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Amount = 15.25,
                            ExpenseId = new Guid("77777777-7777-7777-7777-777777777777"),
                            ExpenseTypeId = "0003"
                        });
                });

            modelBuilder.Entity("SmartBit.Models.ExpenseType", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Code");

                    b.ToTable("ExpenseTypes");

                    b.HasData(
                        new
                        {
                            Code = "0001",
                            Active = true,
                            Description = "Expenses related to the administration and management of the company",
                            Name = "Administrative Expenses"
                        },
                        new
                        {
                            Code = "0002",
                            Active = true,
                            Description = "Expenses directly related to the business operations",
                            Name = "Operational Expenses"
                        },
                        new
                        {
                            Code = "0003",
                            Active = true,
                            Description = "Expenses related to advertising, promotion, and marketing",
                            Name = "Marketing Expenses"
                        });
                });

            modelBuilder.Entity("SmartBit.Models.MonetaryFund", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("MonetaryFund");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0e09e00a-ca41-4d01-89ba-f084231c2fe7"),
                            Active = true,
                            ApplicationUserId = "08c77f09-af58-4fc7-87d6-d2648c7187cc",
                            Name = "Cash",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("bd6e1302-4fa1-41ea-a91c-260ea6c2278d"),
                            Active = true,
                            ApplicationUserId = "08c77f09-af58-4fc7-87d6-d2648c7187cc",
                            Name = "Bank of Ameryca",
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("6ca2098b-1126-4515-8ca2-fb503321620d"),
                            Active = true,
                            ApplicationUserId = "08c77f09-af58-4fc7-87d6-d2648c7187cc",
                            Name = "Western Union",
                            Type = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SmartBit.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SmartBit.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartBit.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SmartBit.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartBit.Models.Deposit", b =>
                {
                    b.HasOne("SmartBit.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartBit.Models.MonetaryFund", "MonetaryFund")
                        .WithMany()
                        .HasForeignKey("MonetaryFundId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("MonetaryFund");
                });

            modelBuilder.Entity("SmartBit.Models.Expense", b =>
                {
                    b.HasOne("SmartBit.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartBit.Models.MonetaryFund", "MonetaryFund")
                        .WithMany()
                        .HasForeignKey("MonetaryFundId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("MonetaryFund");
                });

            modelBuilder.Entity("SmartBit.Models.ExpenseDetail", b =>
                {
                    b.HasOne("SmartBit.Models.Expense", "Expense")
                        .WithMany("ExpenseDetails")
                        .HasForeignKey("ExpenseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartBit.Models.ExpenseType", "ExpenseType")
                        .WithMany()
                        .HasForeignKey("ExpenseTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Expense");

                    b.Navigation("ExpenseType");
                });

            modelBuilder.Entity("SmartBit.Models.MonetaryFund", b =>
                {
                    b.HasOne("SmartBit.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("SmartBit.Models.Expense", b =>
                {
                    b.Navigation("ExpenseDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
